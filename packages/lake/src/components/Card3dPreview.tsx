import { Environment, OrbitControls, useGLTF } from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import envNxUrl from "../../assets/3d-card/environment/nx.png?url";
import envNyUrl from "../../assets/3d-card/environment/ny.png?url";
import envNzUrl from "../../assets/3d-card/environment/nz.png?url";
import envPxUrl from "../../assets/3d-card/environment/px.png?url";
import envPyUrl from "../../assets/3d-card/environment/py.png?url";
import envPzUrl from "../../assets/3d-card/environment/pz.png?url";
import cardGltfUrl from "../../assets/3d-card/model/card.gltf?url";

type CardParams = {
  ownerName: string;
  cardNumber: string;
  expirationDate: string;
  cvv: string;
};

// Use export default for React.lazy
export default (props: CardParams) => {
  return (
    <Canvas camera={{ position: [-8, 0, 0] }}>
      <OrbitControls enableZoom={false} />
      <ambientLight color={0xffffff} intensity={2} />
      <pointLight intensity={2} decay={2} position={[-100, 10, -21]} />
      <pointLight intensity={2} decay={2} position={[100, 10, 21]} />
      <Environment files={[envPxUrl, envNxUrl, envPyUrl, envNyUrl, envPzUrl, envNzUrl]} />
      <Card {...props} />
    </Canvas>
  );
};

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
And adapted to use custom props
*/

type CardGLTFResult = GLTF & {
  nodes: {
    card: THREE.Mesh;
    black_band: THREE.Mesh;
    chip: THREE.Mesh;
    chip_pattern: THREE.Mesh;
    mc_center: THREE.Mesh;
    mc_left: THREE.Mesh;
    mc_right: THREE.Mesh;
    metal_circle: THREE.Mesh;
    metal_circle001: THREE.Mesh;
    metal_circle002: THREE.Mesh;
    metal_mastercard: THREE.Mesh;
  };
  materials: {
    card: THREE.MeshStandardMaterial;
    black_band: THREE.MeshStandardMaterial;
    chip: THREE.MeshStandardMaterial;
    chip_pattern: THREE.MeshStandardMaterial;
    mastercard_orange: THREE.MeshStandardMaterial;
    mastercard_red: THREE.MeshStandardMaterial;
    mastercard_yellow: THREE.MeshStandardMaterial;
    rainbow: THREE.MeshStandardMaterial;
    rainbow_rough: THREE.MeshStandardMaterial;
    rainbow_mastercard: THREE.MeshStandardMaterial;
  };
};

type CardProps = JSX.IntrinsicElements["group"] & CardParams;

export const Card = ({ ownerName, cardNumber, expirationDate, cvv, ...props }: CardProps) => {
  const { nodes, materials } = useGLTF(cardGltfUrl) as CardGLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.card.geometry}
        material={materials.card}
        rotation={[0, -Math.PI / 2, 0]}
      >
        <mesh
          geometry={nodes.black_band.geometry}
          material={materials.black_band}
          position={[0, 1.774, -0.04]}
          rotation={[0, Math.PI / 2, 0]}
        />

        <mesh
          geometry={nodes.chip.geometry}
          material={materials.chip}
          position={[-2.78, 0.439, 0.04]}
          rotation={[0, Math.PI / 2, 0]}
        />

        <mesh
          geometry={nodes.chip_pattern.geometry}
          material={materials.chip_pattern}
          position={[-2.778, 0.442, 0.041]}
          rotation={[0, Math.PI / 2, 0]}
        />

        <mesh
          geometry={nodes.mc_center.geometry}
          material={materials.mastercard_orange}
          position={[3.052, -1.832, 0.04]}
          rotation={[Math.PI / 2, 0, 0]}
        />

        <mesh
          geometry={nodes.mc_left.geometry}
          material={materials.mastercard_red}
          position={[2.676, -1.773, 0.04]}
          rotation={[Math.PI / 2, 0, 0]}
        />

        <mesh
          geometry={nodes.mc_right.geometry}
          material={materials.mastercard_yellow}
          position={[3.47, -1.773, 0.04]}
          rotation={[-Math.PI / 2, 0, 0]}
        />

        <mesh
          geometry={nodes.metal_circle.geometry}
          material={materials.rainbow}
          position={[-2.33, -1.849, -0.04]}
          rotation={[-Math.PI / 2, Math.PI / 2, 0]}
        />

        <mesh
          geometry={nodes.metal_circle001.geometry}
          material={materials.rainbow_rough}
          position={[-2.629, -1.849, -0.041]}
          rotation={[-Math.PI / 2, Math.PI / 2, 0]}
          scale={[0.35, 1, 0.35]}
        />

        <mesh
          geometry={nodes.metal_circle002.geometry}
          material={materials.rainbow_rough}
          position={[-2.33, -1.849, -0.041]}
          rotation={[-Math.PI / 2, Math.PI / 2, 0]}
        />

        <mesh
          geometry={nodes.metal_mastercard.geometry}
          material={materials.rainbow_mastercard}
          position={[0.914, -1.298, -0.041]}
          rotation={[Math.PI / 2, 0, Math.PI]}
          scale={0.09}
        />
      </mesh>
    </group>
  );
};
